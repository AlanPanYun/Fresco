参考资源：
1 http://www.2cto.com/kf/201605/511009.html



通常认为：Lock提供了比synchronized方法和synchronized代码块更广泛的锁定操作，Lock更灵活的结构，
有很大的差别，并且可以支持多个Condition对象 Lock是控制多个线程对共享资源进行访问的工具。通常，
锁提供了对共享资源的独占访问，每次只能有一个线程对Lock对象加锁， 线程开始访问共享资源之前应先获得
Lock对象。不过某些锁支持共享资源的并发访问，如：ReadWriteLock（读写锁），在线程安全控制中，
通常使用ReentrantLock（可重入锁）。使用该Lock对象可以显示加锁、释放锁。

    class C {
        //锁对象
        private final ReentrantLock lock = new ReentrantLock();
        ......
        //保证线程安全方法
        public void method() {
            //上锁
            lock.lock();
            try {
                //保证线程安全操作代码
            } catch() {

            } finally {
                lock.unlock();//释放锁
            }
        }
    }
使用Lock对象进行同步时，锁定和释放锁时注意把释放锁放在finally中保证一定能够执行。
使用锁和使用同步很类似，只是使用Lock时显示的调用lock方法来同步。而使用同步方法synchronized时系统
会隐式使用当前对象作为同步监视器，同样都是“加锁->访问->释放锁”的操作模式，都可以保证只能有一个
线程操作资源。 同步方法和同步代码块使用与竞争资源相关的、隐式的同步监视器，并且强制要求加锁和释放
锁要出现在一个块结构中，而且获得多个锁时，它们必须以相反的顺序释放，且必须在与所有锁被获取时相同
的范围内释放所有资源。 Lock提供了同步方法和同步代码库没有的其他功能，包括用于非块结构的tryLock方法
，已经试图获取可中断锁lockInterruptibly()方法， 还有获取超时失效锁的tryLock(long, timeUnit)方法。
 ReentrantLock具有重入性，也就是说线程可以对它已经加锁的ReentrantLock再次加锁，ReentrantLock对
 象会维持一个计数器来追踪lock方法的嵌套调用，线程在每次调用lock()加锁后，必须显示的调用unlock()
 来释放锁，所以一段被保护的代码可以调用另一个被相同锁保护的方法。

